print(bonds$fitted.value)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(bonds$CouponRate,bonds$BidPrice,main = "CouponRate v/s BidPrice",xlab = "CouponRate",ylab = "BidPrice")
identify(bonds)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
View(A)
summary(A)
plot(bonds$CouponRate,bonds$BidPrice,main = "CouponRate v/s BidPrice",xlab = "CouponRate",ylab = "BidPrice")
cor(bonds$BidPrice,bonds$CouponRate)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual",abline(h=2,lty=2),abline(h=-2,lty=2),identify(A$fitted.values,rstandard(A)))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual",abline(h=2,lty=2),abline(h=-2,lty=2),identify(A$fitted.values,rstandard(A)))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
source("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/Week-6-Assignment.R", echo=TRUE)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
source("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/Week-6-Assignment.R", echo=TRUE)
bonds_new=bonds[-13,]
# bonds_new=bonds[-3,]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new)
summary(A_new)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
# print(bonds$fitted.value)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
# bonds_new=bonds[-3,]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new)
View(A)
View(A_new)
View(bonds_new)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
abline=A
plot(bonds$CouponRate[-c(4,13,34,35)],bonds$BidPrice[-c(4,13,34,35)],main = "plot without outliers",xlab = "Coupon rate",ylab = "bid prize")
abline=A
abline(A_new)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[c(-13,-4,-34,-35)]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
plot(bonds$CouponRate[-c(4,13,34,35)],bonds$BidPrice[-c(4,13,34,35)],main = "plot without outliers",xlab = "Coupon rate",ylab = "bid prize")
abline(A_new)
plot(bonds$CouponRate[-c(4,13,34,35)],bonds$BidPrice[-c(4,13,34,35)],main = "plot without outliers",xlab = "Coupon rate",ylab = "bid prize")
abline(A_new)
View(bonds_new)
rm(list=ls()) # removes all variables stored previously
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
bonds_new=bonds[-4,]
bonds_new=bonds[-34,]
bonds_new=bonds[-35,]
View(bonds_new)
bonds_new=bonds[-13,]
bonds_new=bonds[-4,]
bonds_new=bonds[-34,]
bonds_new=bonds[-35,]
View(bonds_new)
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new3)
summary(A_new)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
bonds_new1=bonds_new[-4,]
bonds_new2=bonds_new1[-34,]
bonds_new3=bonds_new2[-35,]
View(bonds_new1)
View(bonds_new2)
View(bonds_new3)
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new3)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
plot(bonds$CouponRate[-c(4,13,34,35)],bonds$BidPrice[-c(4,13,34,35)],main = "plot without outliers",xlab = "Coupon rate",ylab = "bid prize")
abline(A_new)
bonds_new=bonds[-13,]
bonds_new1=bonds_new[-35,]
bonds_new2=bonds_new1[-4,]
bonds_new3=bonds_new2[-34,]
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(h=2,lty=2)
abline(h=-2,lty=2)
identify(A$fitted.values,rstandard(A))
bonds_new=bonds[-13,]
bonds_new1=bonds_new[-35,]
bonds_new2=bonds_new1[-4,]
bonds_new3=bonds_new2[-34,]
A_new=lm(formula = BidPrice~CouponRate,data = bonds_new3)
summary(A_new)
identify(A_new$fitted.values,rstandard(A_new))
plot(bonds$CouponRate[-c(4,13,34,35)],bonds$BidPrice[-c(4,13,34,35)],main = "plot without outliers",xlab = "Coupon rate",ylab = "bid prize")
abline(A_new)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(A$fitted.values,rstandard(A),main = "Resudual plot",xlab = "Predicted values for bid prize",ylab = "Standard residual")
abline(A)
View(bonds)
rm(list=ls()) # removes all variables stored previously
library(Hmisc) # import
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
A=lm(formula = BidPrice~CouponRate,data = bonds)
summary(A)
plot(bonds$CouponRate,bonds$BidPrice,main="plot",xlab="coupon rate",ylab="bid prize")
abline(A)
View(bonds)
abline(A-8.35)
iris.csv...iris <- read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/iris.csv - iris.csv")
View(iris.csv...iris)
iris_data= read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/iris.csv - iris.csv")
dim(iris_data)
iris_data= read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/iris.csv - iris.csv",header = T,row.names = "ID",stringsAsFactors = T)
dim(iris_data)
View(iris_data)
summary(iris_data)
library(ggplot2)
install.packages("GGally")
library(GGally)
ggpairs(iris_data)
# q9
apply(iris_data[,3:4],1,mean)
# b)
sapply(iris_data[,3:4],2,mean)
# b)
sapply(iris_data[,3:4],mean)
# c)
lapply(iris_data[,3:4],mean)
install.packages("caTools")
iris_data= read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/iris.csv - iris.csv",header = T,row.names = "ID",stringsAsFactors = T)
# q6
dim(iris_data)
View(iris_data)
# q7
summary(iris_data)
library(ggplot2)
library(GGally)
ggpairs(iris_data)
# q9
# d)
apply(iris_data[,3:4],1,mean)
# b)
sapply(iris_data[,3:4],mean)
# c)
lapply(iris_data[,3:4],mean)
# q10
sum(is.na(iris_data))
# q10
sum(is.na(iris_data))
gc()
rm(list=ls())
crashTest_1 <- read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/crashTest_1.csv")
View(crashTest_1)
crashTest_1_TEST <- read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/crashTest_1_TEST.csv")
View(crashTest_1_TEST)
rm(list=ls())
crashTest_1=read.csv("crashTest_1",row.names = 1)
crashTest_1_TEST=read.csv("crashTest_1_TEST",row.names = 1)
rm(list=ls())
crashTest_1=read.csv("crashTest_1.csv",row.names = 1)
rm(list=ls())
crashTest_1=read.csv("crashTest_1.csv",row.names = 1)
crashTest_1 <- read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/crashTest_1.csv")
View(crashTest_1)
crashTest_1_TEST <- read.csv("D:/Visual Studio Code/GIT-1/R-Studio/Week-7/crashTest_1_TEST.csv")
View(crashTest_1_TEST)
crashTest_1=read.csv("crashTest_1.csv",row.names = 1)
crashTest_1=read.csv("crashTest_1.csv",row.names = 1)
crashTest_1=read.csv(crashTest_1.csv,row.names = 1)
crashTest_1=read.csv("crashTest_1.csv",row.names = 1)
View(crashTest_1_TEST)
bonds <- read.delim("D:/Visual Studio Code/GIT-1/R-Studio/Week-6/bonds.txt")
View(bonds)
View(bonds)
rm(list=ls())
library(readr)
crashTest_1_TEST <- read_csv("Week-7/crashTest_1_TEST.csv")
View(crashTest_1_TEST)
library(readr)
crashTest_1 <- read_csv("Week-7/crashTest_1.csv")
View(crashTest_1)
rm(list=ls())
crashTest_1 <- read_csv("Week-7/crashTest_1.csv",row.names=1)
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType ~ . ,family = "binomial" , data = crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType ~ . ,family = 'binomial' , data = crashTest_1)
# model building
logisfit=glm(formula=CarType ~ . ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
# model building
logisfit=glm(formula=CarType~. ,family = 'binomial' , data = crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType~. ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
View(crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType~. , data = crashTest_1)
summary(logisfit)
install.packages("caret")
library(caret)
# structure of data
str(crashTest_1)
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
factor(CarType , c(0,1))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
factor(crashTest_1$CarType , c(0,1))
# structure of data
str(crashTest_1)
factor(crashTest_1$CarType)
factor(crashTest_1$CarType , c(1,2))
install.packages("tidyverse")
library(tidyverse)
(list=ls())
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
factor(crashTest_1$CarType , c(1,2))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
crashTest_1=crashTest_1 %>% mutate(crashTest_1$CarType = recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
crashTest_1 %>% mutate(crashTest_1$CarType = recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
factor(crashTest_1$CarType , c(1,2))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType)
library(tidyverse)
# crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType) #very very important because to convert suv and hatchback to binomial variables ie 0 and 1
library(tidyverse)
# crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType~. , data = crashTest_1)
# model building
logisfit=glm(formula=crashTest_1$CarType~. ,family = 'binomial' , data = crashTest_1)
# model building
logisfit=glm(formula=CarType~. ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
logistrain=predict(logisfit,type='response')
plot(logistrain)
tapply(logistrain,crashTest_1$CarType,mean)
logispred=predict(logisfit,newdata = crashTest_1_TEST,type = 'response')
plot(logispred)
crashTest_1_TEST[logispred<=0.5,"logispred"="Hatchback"]
crashTest_1_TEST[logispred>0.5,"logispred"="SUV"]
crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback"
crashTest_1_TEST[logispred>0.5,"logispred"]="SUV"
h=crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback"
s=crashTest_1_TEST[logispred>0.5,"logispred"]="SUV"
h
s
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType) #very very important because to convert suv and hatchback to binomial variables ie 0 and 1
library(tidyverse)
# crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
# model building
logisfit=glm(formula=CarType~. ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
logistrain=predict(logisfit,type='response')
plot(logistrain)
tapply(logistrain,crashTest_1$CarType,mean)
logispred=predict(logisfit,newdata = crashTest_1_TEST,type = 'response')
plot(logispred)
crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback"
crashTest_1_TEST[logispred>0.5,"logispred"]="SUV"
library(caret)
View(crashTest_1_TEST)
confusionMatrix(table(crashTest_1_TEST[,7],crashTest_1_TEST[,6],positive="Hatchback"))
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType) #very very important because to convert suv and hatchback to binomial variables ie 0 and 1
library(tidyverse)
# crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
# model building
logisfit=glm(formula=CarType~. ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
logistrain=predict(logisfit,type='response')
plot(logistrain)
tapply(logistrain,crashTest_1$CarType,mean)
logispred=predict(logisfit,newdata = crashTest_1_TEST,type = 'response')
plot(logispred)
crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback"
crashTest_1_TEST[logispred>0.5,"logispred"]="SUV"
library(caret)
confusionMatrix(table(crashTest_1_TEST[,7],crashTest_1_TEST[,6],positive="Hatchback"))
View(crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback")
rm(list=ls())
crashTest_1 <- read.csv("Week-7/crashTest_1.csv",row.names=1)
crashTest_1_TEST <- read.csv("Week-7/crashTest_1_TEST.csv",row.names=1)
crashTest_1$CarType=as.factor(crashTest_1$CarType) #very very important because to convert suv and hatchback to binomial variables ie 0 and 1
library(tidyverse)
# crashTest_1=crashTest_1 %>% mutate(recode(crashTest_1$CarType,"SUV"="0" , "Hatchback"="1"))
# factor(crashTest_1$CarType , c(1,2))
# structure of data
str(crashTest_1)
# summary
summary(crashTest_1)
# model building
logisfit=glm(formula=CarType~. ,family = 'binomial' , data = crashTest_1)
summary(logisfit)
logistrain=predict(logisfit,type='response')
plot(logistrain)
tapply(logistrain,crashTest_1$CarType,mean)
logispred=predict(logisfit,newdata = crashTest_1_TEST,type = 'response')
plot(logispred)
crashTest_1_TEST[logispred<=0.5,"logispred"]="Hatchback"
crashTest_1_TEST[logispred>0.5,"logispred"]="SUV"
library(caret)
confusionMatrix(table(crashTest_1_TEST[,7],crashTest_1_TEST[,6],positive="Hatchback"))
confusionMatrix(table(crashTest_1_TEST[,7],crashTest_1_TEST[,6]))
